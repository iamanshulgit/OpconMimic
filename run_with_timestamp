'''
Created by Anshul (18/7/2022)
Description: To run the list of jobs manually and create the log with the name of manualJobRun.txt
'''

import datetime
import time
import os
import subprocess
import sys
from csv import DictReader

def run_job(job_name):
    print(job_name)
    #...

def change_start_time(start_time):
        if start_time%100>59:
                start_time=start_time+(100-(start_time%100))
        return start_time

flag=True
original_stdout = sys.stdout
sdate=datetime.datetime.now()
dateTimeStr = str(sdate)
email_message=''
original_stdout = sys.stdout

with open("log_file.txt","a") as logfile:
        sys.stdout = logfile
        print("Today's Date: "+dateTimeStr[:10])

        stime=sdate.strftime("%H%M")
        print("Script Start Time: "+stime)

        #getting evn. for all script
        pathRun = os.getenv('BIN')
        print('$BIN = '+ pathRun)

        #read from listOfJobs.txt for list of jobs.
        with open('listOfJobs.csv','r') as read_obj:
                dict_reader = DictReader(read_obj)
                list_of_dict_job = list(dict_reader)
                while(flag):
                        sdate=datetime.datetime.now()
                        stime=int(sdate.strftime("%H%M"))
                        print('Current time: '+str(stime))
                        for job in list_of_dict_job:
                                print(job['job_name']+' '+job['start_time']+ ' '+job['end_time']  +' '+job['frequency'])
                                start_time = int(job['start_time'])
                                end_time = int(job['end_time'])
                                frequency = int(job['frequency'])

                                if stime >= start_time and stime <= end_time:
                                        #get process id and check if it is running or not.
                                        tempPid = 'ps -ef | grep -v grep | grep '+ job['job_name'] +' | wc -l'
                                        pid = int(subprocess.Popen(tempPid, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()[0])
                                        print('Running Process for '+job['job_name']+': ',pid)
                                        if pid==0:
                                                start_time=start_time+frequency
                                                job['start_time']=str(change_start_time(start_time))
                                                tempJob = 'nohup '+pathRun+'/' +job['job_name']+' '+job['parameter_name']+' &'
                                                print('Job: '+job['job_name']+' started running at '+stime)
                                                os.system(tempJob)
                                                print(job['job_name']+' running and start_time modified to '+job['start_time'])
                                        else:
                                                print('Sending email because it is exceeded maxruntime')
                                                email_message='job has exceeded the Max Runtime.'
                                                cmd_job_email = './sendfile.sh '+job['job_name']+' ' +email_message
                                                os.system(cmd_job_email)
                                                start_time=start_time+frequency
                                                job['start_time']=str(change_start_time(start_time))
                                                print(job['job_name']+' has exceeded Maxruntime, skipping this run and  modification '+job['start_time'])
                                                #print('Remove the '+job['job_name']+' from list')
                                                #list_of_dict_job[:]=[item for item in list_of_dict_job if item.get('job_name')!=job['job_name']]
                                elif stime > end_time:
                                        print('Remove the '+job['job_name']+' from list')
                                        list_of_dict_job[:]=[item for item in list_of_dict_job if item.get('job_name')!=job['job_name']]
                                if len(list_of_dict_job)==0:
                                        flag=False
                                        break
                        if flag==True:
                                time.sleep(120)
                        else:
                                break

        sys.stdout = original_stdout
        read_obj.close()
